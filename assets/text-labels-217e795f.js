import{c as R,a as k,s as $}from"./utils-7421e6bb.js";import{l as h,c as I}from"./d3-74ae7c41.js";import"./vendor-fecc589d.js";const y=document.querySelector("#canvas"),m=document.querySelector("#canvas-wrapper"),g=document.querySelector("#num-points"),S=document.querySelector("#num-points-value"),x=document.querySelector("#point-size"),M=document.querySelector("#point-size-value"),E=document.querySelector("#opacity"),A=document.querySelector("#opacity-value"),w=document.querySelector("#click-lasso-initiator"),T=document.querySelector("#reset"),O=document.querySelector("#export"),f=document.querySelector("#example-text-overlay");f.setAttribute("class","active");f.removeAttribute("href");const v=document.createElement("div");v.id="note";v.textContent="Zoom in to see labels!";m.appendChild(v);const t=document.createElement("canvas");t.id="#text-overlay";t.style.position="absolute";t.style.top=0;t.style.right=0;t.style.bottom=0;t.style.left=0;t.style.pointerEvents="none";m.appendChild(t);const L=()=>{const{width:e,height:n}=m.getBoundingClientRect();t.width=e*window.devicePixelRatio,t.height=n*window.devicePixelRatio,t.style.width=`${e}px`,t.style.height=`${n}px`};L();window.addEventListener("resize",L);const P=12,c=t.getContext("2d");c.font=`${P*window.devicePixelRatio}px sans-serif`;c.textAlign="center";let p=[],l=1e4,s=4,r=1,u=[];const V=200,B=10,D=2,F=!0,N=[1,1,.878431373,.33],o=R({canvas:y,lassoMinDelay:B,lassoMinDist:D,pointSize:s,showReticle:F,reticleColor:N,xScale:h().domain([-1,1]),yScale:h().domain([-1,1]),pointColor:"#fff",opacityBy:"density",lassoInitiator:!0});k(o);O.addEventListener("click",()=>$(o));console.log(`Scatterplot v${o.get("version")}`);o.subscribe("select",({points:e})=>{if(console.log("Selected:",e),u=e,u.length===1){const n=p[u[0]];console.log(`X: ${n[0]}
Y: ${n[1]}
Category: ${n[2]}
Value: ${n[3]}`)}});o.subscribe("deselect",()=>{u=[]});const W=(e,n,i)=>{c.clearRect(0,0,t.width,t.height),c.fillStyle="rgb(255, 255, 255)";const a=window.devicePixelRatio;for(let d=0;d<e.length;d++){const[C,H]=p[e[d]];c.fillText(e[d],n(C)*a,i(H)*a-P*1.2*a)}},X=()=>{c.clearRect(0,0,y.width,y.height)};o.subscribe("drawing",({xScale:e,yScale:n})=>{const i=o.get("pointsInView");i.length<=V?W(i,e,n):X()});const Y=e=>Array.from({length:e},()=>[-1+Math.random()*2,-1+Math.random()*2]),b=e=>{l=e,g.value=l,S.innerHTML=l,p=Y(l),o.draw(p)},Z=e=>{S.innerHTML=`${+e.target.value} <em>release to redraw</em>`};g.addEventListener("input",Z);const j=e=>b(+e.target.value);g.addEventListener("change",j);const G=e=>{const n=I().domain([1,10]).range([e,e*10]);return Array(100).fill().map((i,a)=>n(1+a/99*9))},q=e=>{s=e,x.value=s,M.innerHTML=s,o.set({pointSize:G(s)})},J=e=>q(+e.target.value);x.addEventListener("input",J);const K=e=>Array(10).fill().map((n,i)=>(i+1)/10*e),z=e=>{r=e,E.value=r,A.innerHTML=r,o.set({opacity:K(r)})},Q=e=>z(+e.target.value);E.addEventListener("input",Q);const U=e=>{o.set({lassoInitiator:e.target.checked})};w.addEventListener("change",U);w.checked=o.get("lassoInitiator");const _=()=>{o.reset()};T.addEventListener("click",_);q(s);z(r);b(l);
